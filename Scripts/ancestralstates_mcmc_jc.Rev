#-----------------------------------------------------------------#
# Inferring ancestral states and rates of morphological evolution #
#-----------------------------------------------------------------#

# Reading in the Data 

# Import the morphological character matrix #
# this file contains only the taxa for which morphological characters are available #
morpho <- readDiscreteCharacterData("Data/Ophiolepididae_molecular_for_Natya.nex")

# Note that the readTrees function always returns a vector of trees, 
phy <- readTrees("Data/sord3_lepid2_med.tre")[1]


# Number of MCMC generations
gen<-10000

# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()


# Binary morphological substitution model #
# Create the Q matrix. We initialize the Jukes-Cantor matrix with three states
Q_morpho <- fnJC(9)

# Specify a prior on the rate of morphological evolution
mu_morpho ~ dnExponential( 1.0 )

# Moves on the parameters to the Gamma distribution.
moves.append( mvScale(mu_morpho,lambda=1, weight=2.0) )



# Combine all of our elements into a CTMC.
phyMorpho ~ dnPhyloCTMC(tree=phy, branchRates=mu_morpho, Q=Q_morpho, type="Standard")
phyMorpho.clamp(morpho)



########
# MCMC #
########

# initialize the model object #
mymodel = model(phy)
# Create a vector of monitors #
# 1. for the full model #
monitors.append( mnModel(filename="Output/mk.log", printgen=100) )
# 2. and a few select parameters to be printed to the screen #
monitors.append( mnScreen(printgen=100) )
# 3. add an ancestral state monitor
monitors.append( mnJointConditionalAncestralState(tree=phy,
                                                  ctmc=phyMorpho,
                                                  filename="Output/mk.states.txt",
                                                  type="Standard",
                                                  printgen=100,
                                                  withTips=true,
                                                  withStartStates=false) )

# Initialize the MCMC object #
mymcmc = mcmc(mymodel, monitors, moves, nruns=2, combine="mixed")

# Run the MCMC #
mymcmc.run(generations=gen, tuningInterval=200)

# check the performance of the MCMC/moves
mymcmc.operatorSummary()


# Read in the tree trace and construct the ancestral states
anc_states = readAncestralStateTrace("Output/mk.states.txt")
anc_tree = ancestralStateTree(tree=phy, ancestral_state_trace_vector=anc_states, include_start_states=false, file="Output/ase_mk.tree", burnin=0.25, summary_statistic="MAP", site=1)
writeNexus( anc_tree, filename="Output/ase_mk.tree" )

# Quit RevBayes #
q()
